package com.example.tlu_routine.adapter;

import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.core.graphics.drawable.DrawableCompat;
import androidx.recyclerview.widget.RecyclerView;

import com.example.tlu_routine.R;
import com.example.tlu_routine.model.Tag;

import java.util.List;

public class TagManagerAdapter extends RecyclerView.Adapter<TagManagerAdapter.TagViewHolder> {

    // 1. ƒê·ªãnh nghƒ©a 2 interface listener ri√™ng bi·ªát cho S·ª≠a v√† X√≥a
    public interface OnTagEditListener {
        // Khi s·ª≠a, c·∫ßn c·∫£ ƒë·ªëi t∆∞·ª£ng Tag v√† v·ªã tr√≠ c·ªßa n√≥
        void onEditClick(Tag tag, int position);
    }

    public interface OnTagDeleteListener {
        // Khi x√≥a, ch·ªâ c·∫ßn v·ªã tr√≠
        void onDeleteClick(int position);
    }

    private final List<Tag> tagList;
    private final OnTagEditListener editListener;
    private final OnTagDeleteListener deleteListener;

    // 2. C·∫≠p nh·∫≠t constructor ƒë·ªÉ nh·∫≠n c·∫£ 2 listener
    public TagManagerAdapter(List<Tag> tagList, OnTagEditListener editListener, OnTagDeleteListener deleteListener) {
        this.tagList = tagList;
        this.editListener = editListener;
        this.deleteListener = deleteListener;
    }

    @NonNull
    @Override
    public TagViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_tag_management, parent, false);
        return new TagViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull TagViewHolder holder, int position) {
        Tag tag = tagList.get(position);
        // ViewHolder ch·ªâ ch·ªãu tr√°ch nhi·ªám hi·ªÉn th·ªã d·ªØ li·ªáu
        holder.bind(tag);

        // --- G√°n s·ª± ki·ªán listener t·∫°i ƒë√¢y ---
        // 3. S·ª± ki·ªán click S·ª≠a: G·ªçi v·ªÅ Fragment v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
        holder.editButton.setOnClickListener(v -> {
            if (editListener != null) {
                // L·∫•y v·ªã tr√≠ m·ªõi nh·∫•t ƒë·ªÉ tr√°nh l·ªói khi x√≥a item
                int currentPosition = holder.getAdapterPosition();
                if (currentPosition != RecyclerView.NO_POSITION) {
                    editListener.onEditClick(tagList.get(currentPosition), currentPosition);
                }
            }
        });

        // 4. S·ª± ki·ªán click X√≥a: G·ªçi v·ªÅ Fragment ch·ªâ v·ªõi v·ªã tr√≠
        holder.deleteButton.setOnClickListener(v -> {
            if (deleteListener != null) {
                int currentPosition = holder.getAdapterPosition();
                if (currentPosition != RecyclerView.NO_POSITION) {
                    deleteListener.onDeleteClick(currentPosition);
                }
            }
        });
    }

    @Override
    public int getItemCount() {
        return tagList.size();
    }

    // ViewHolder ch·ªâ l√†m nhi·ªám v·ª• hi·ªÉn th·ªã, kh√¥ng x·ª≠ l√Ω logic click
    static class TagViewHolder extends RecyclerView.ViewHolder {
        private final View tagColorDot;
        private final TextView tagIcon;
        private final TextView tagName;
        private final ImageButton editButton;
        private final ImageButton deleteButton;

        public TagViewHolder(@NonNull View itemView) {
            super(itemView);
            tagColorDot = itemView.findViewById(R.id.tag_color_dot);
            tagIcon = itemView.findViewById(R.id.tag_icon);
            tagName = itemView.findViewById(R.id.tag_name);
            editButton = itemView.findViewById(R.id.btn_edit_tag);
            deleteButton = itemView.findViewById(R.id.btn_delete_tag);
        }

        public void bind(final Tag tag) {
            tagName.setText(tag.getName());

            if (tag.getIconEmoji() != null && !tag.getIconEmoji().isEmpty()) {
                tagIcon.setText(tag.getIconEmoji());
            } else {
                tagIcon.setText("üè∑Ô∏è"); // Fallback emoji
            }

            // ƒê·ªïi m√†u cho color dot
            Drawable unwrappedDrawable = tagColorDot.getBackground();
            Drawable wrappedDrawable = DrawableCompat.wrap(unwrappedDrawable);
            try {
                DrawableCompat.setTint(wrappedDrawable, Color.parseColor(tag.getColorHex()));
            } catch (Exception e) {
                // Fallback color n·∫øu m√£ m√†u hex kh√¥ng h·ª£p l·ªá
                DrawableCompat.setTint(wrappedDrawable, Color.GRAY);
            }
        }
    }
}